#
# (C) Copyright 2000-2010
# Wolfgang Denk, DENX Software Engineering, wd@denx.de.
#
# See file CREDITS for list of people who contributed to this
# project.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundatio; either version 2 of
# the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston,
# MA 02111-1307 USA
#

VERSION = 3
PATCHLEVEL = 3
SUBLEVEL = 0
EXTRAVERSION =
ifneq "$(SUBLEVEL)" ""
U_BOOT_VERSION = $(VERSION).$(PATCHLEVEL).$(SUBLEVEL)$(EXTRAVERSION)
else
U_BOOT_VERSION = $(VERSION).$(PATCHLEVEL)$(EXTRAVERSION)
endif
TIMESTAMP_FILE = $(obj)include/timestamp_autogenerated.h
VERSION_FILE = $(obj)include/version_autogenerated.h

HOSTARCH := $(shell uname -m | \
	sed -e s/i.86/i386/ \
	    -e s/sun4u/sparc64/ \
	    -e s/arm.*/arm/ \
	    -e s/sa110/arm/ \
	    -e s/ppc64/powerpc/ \
	    -e s/ppc/powerpc/ \
	    -e s/macppc/powerpc/)

HOSTOS := $(shell uname -s | tr '[:upper:]' '[:lower:]' | \
	    sed -e 's/\(cygwin\).*/cygwin/')

# Set shell to bash if possible, otherwise fall back to sh
SHELL := $(shell if [ -x "$$BASH" ]; then echo $$BASH; \
	else if [ -x /bin/bash ]; then echo /bin/bash; \
	else echo sh; fi; fi)

export	HOSTARCH HOSTOS SHELL

# Deal with colliding definitions from tcsh etc.
VENDOR=

CONFIG_MERGE_IMAGE ?= $(obj)./merge.img
#########################################################################
# Allow for silent builds
ifeq (,$(findstring s,$(MAKEFLAGS)))
XECHO = echo
else
XECHO = :
endif

#########################################################################
#
# U-boot build supports producing a object files to the separate external
# directory. Two use cases are supported:
#
# 1) Add O= to the make command line
# 'make O=/tmp/build all'
#
# 2) Set environement variable BUILD_DIR to point to the desired location
# 'export BUILD_DIR=/tmp/build'
# 'make'
#
# The second approach can also be used with a MAKEALL script
# 'export BUILD_DIR=/tmp/build'
# './MAKEALL'
#
# Command line 'O=' setting overrides BUILD_DIR environent variable.
#
# When none of the above methods is used the local build is performed and
# the object files are placed in the source directory.
#

ifdef O
ifeq ("$(origin O)", "command line")
BUILD_DIR := $(O)
endif
endif

ifneq ($(BUILD_DIR),)
saved-output := $(BUILD_DIR)

# Attempt to create a output directory.
$(shell [ -d ${BUILD_DIR} ] || mkdir -p ${BUILD_DIR})

# Verify if it was successful.
BUILD_DIR := $(shell cd $(BUILD_DIR) && /bin/pwd)
$(if $(BUILD_DIR),,$(error output directory "$(saved-output)" does not exist))
endif # ifneq ($(BUILD_DIR),)

OBJTREE		:= $(if $(BUILD_DIR),$(BUILD_DIR),$(CURDIR))
SRCTREE		:= $(CURDIR)
TOPDIR		:= $(SRCTREE)
LNDIR		:= $(OBJTREE)
export	TOPDIR SRCTREE OBJTREE

MKCONFIG	:= $(SRCTREE)/mkconfig
export MKCONFIG

ifneq ($(OBJTREE),$(SRCTREE))
REMOTE_BUILD	:= 1
export REMOTE_BUILD
endif

# $(obj) and (src) are defined in config.mk but here in main Makefile
# we also need them before config.mk is included which is the case for
# some targets like unconfig, clean, clobber, distclean, etc.
ifneq ($(OBJTREE),$(SRCTREE))
obj := $(OBJTREE)/
src := $(SRCTREE)/
else
obj :=
src :=
endif
export obj src

# Make sure CDPATH settings don't interfere
unexport CDPATH

MERGE_IMAGE_PATH := $(shell cd $(dir ${CONFIG_MERGE_IMAGE}) && pwd)
ifneq ($(MERGE_IMAGE_PATH),)
  CONFIG_MERGE_IMAGE := $(MERGE_IMAGE_PATH)/$(notdir ${CONFIG_MERGE_IMAGE})
  CFG_MERGE_IMAGE_FILE := $(shell if [ -f ${CONFIG_MERGE_IMAGE} ]; then (\
	echo "${CONFIG_MERGE_IMAGE}"; ) else ( echo ""; ) fi)
  ifneq ($(CFG_MERGE_IMAGE_FILE),)
    MKFLAGS += -DCONFIG_MERGE_IMAGE_SUPPORT -DCFG_MERGE_IMAGE_FILE=\"$(CFG_MERGE_IMAGE_FILE)\"
  endif
endif

MKFLAGS +=-DVERSION=$(VERSION) -DPATCHLEVEL=$(PATCHLEVEL) -DSUBLEVEL=$(SUBLEVEL)
export MKFLAGS

# The "tools" are needed early, so put this first
# Don't include stuff already done in $(LIBS)
SUBDIRS	= tools


.PHONY : $(SUBDIRS)

ifeq ($(obj)include/config.mk,$(wildcard $(obj)include/config.mk))

# Include autoconf.mk before config.mk so that the config options are available
# to all top level build files.  We need the dummy all: target to prevent the
# dependency target in autoconf.mk.dep from being the default.
all:
sinclude $(obj)include/autoconf.mk.dep
sinclude $(obj)include/autoconf.mk

# load ARCH, BOARD, and CPU configuration
include $(obj)include/config.mk
export	ARCH CPU BOARD VENDOR SOC

# set default to nothing for native builds
ifeq ($(HOSTARCH),$(ARCH))
CROSS_COMPILE ?=
endif

# load other configuration
include $(TOPDIR)/config.mk

ifeq ($(CROSS_COMPILE),)
$(error You should define CROSS_COMPILE!)
endif

#########################################################################
AUXIMAGE =  $(TOPDIR)/auxcode_sign.img

ifeq ($(CHIP_TYPE),hi3798mv200_a)
ARCH_AUXIMAGE = $(TOPDIR)/arch/$(ARCH)/cpu/$(CPU)/auxcode_sign_hi3798mv200_a.img
else
ARCH_AUXIMAGE = $(TOPDIR)/arch/$(ARCH)/cpu/$(CPU)/auxcode_sign.img
endif

HSLIMAGE =  $(TOPDIR)/hsl_sign.img
ARCH_HSLIMAGE = $(TOPDIR)/arch/$(ARCH)/cpu/$(CPU)/hsl_sign.img
ASCIMAGE =  $(TOPDIR)/asc_sign.img
AUXCODE  := $(shell if [ -d $(TOPDIR)/../auxcode ]; then \
			echo $(TOPDIR)/../auxcode; \
		else if [ -d $(TOPDIR)/auxcode ]; then \
			echo $(TOPDIR)/auxcode; \
		fi;fi;)

ifdef CONFIG_ADVANCED_CHIP
ARCH_ASCIMAGE = $(TOPDIR)/arch/$(ARCH)/cpu/$(CPU)/asc_sign_advanced.img
else
ARCH_ASCIMAGE = $(TOPDIR)/arch/$(ARCH)/cpu/$(CPU)/asc_sign_basic.img
endif

MKFLAGS +=-DCONFIG_AUXIMAGE=\"$(AUXIMAGE)\"
MKFLAGS +=$(shell if [ -f $(ARCH_HSLIMAGE) ]; then echo \
	"-DCONFIG_HSLIMAGE=\\\"$(HSLIMAGE)\\\""; fi)
MKFLAGS +=$(shell if [ -f $(ARCH_ASCIMAGE) ]; then echo \
	"-DCONFIG_ASCIMAGE=\\\"$(ASCIMAGE)\\\""; fi)

#########################################################################
# U-Boot objects....order is important (i.e. start must be first)

OBJS  = $(CPUDIR)/start.o
ifeq ($(CPU),i386)
OBJS += $(CPUDIR)/start16.o
OBJS += $(CPUDIR)/resetvec.o
endif
ifeq ($(CPU),ppc4xx)
OBJS += $(CPUDIR)/resetvec.o
endif
ifeq ($(CPU),mpc85xx)
OBJS += $(CPUDIR)/resetvec.o
endif

OBJS := $(addprefix $(obj),$(OBJS))

LIBS  = lib/libgeneric.a
LIBS += lib/lzma/liblzma.a
LIBS += lib/lzo/liblzo.a

ifdef CONFIG_CMD_UPDATE
LIBS += lib/update/libupdate.a
endif

LIBS += $(shell if [ -f board/$(VENDOR)/common/Makefile ]; then echo \
	"board/$(VENDOR)/common/lib$(VENDOR).a"; fi)

LIBS += $(CPUDIR)/lib$(CPU).a
LIBS += arch/$(ARCH)/lib/lib$(ARCH).a
LIBS += net/libnet.a
ifdef CONFIG_SATA_SUPPORT
LIBS += drivers/sata/libblock.a
endif
LIBS += drivers/mmc/libmmc.a
ifdef CONFIG_EXT4
LIBS += fs/ext4/libext4.a
endif
LIBS += drivers/mtd/libmtd.a
ifdef CONFIG_NAND_SUPPORT
LIBS += drivers/mtd/nand/libnand.a
ifdef CONFIG_NAND_FLASH_HISFC400
LIBS += drivers/mtd/nand/hisfc400/libhisfc400.a
endif
endif
ifdef CONFIG_SPI_NAND_SUPPORT
LIBS += drivers/mtd/nand/libnand.a
endif
ifdef CONFIG_HIFMC100_SUPPORT
LIBS += drivers/mtd/hifmc100/libhifmc100.a
endif
LIBS += drivers/mtd/spi/libspi_flash.a
LIBS += drivers/net/libnet.a
LIBS += drivers/net/phy/libphy.a

ifndef CONFIG_SUPPORT_CA_RELEASE
LIBS += drivers/net/hisfv300/libhisfv300.a
LIBS += drivers/net/higmac/libhigmac.a
ifdef CONFIG_NET_HIGMACV300
LIBS += drivers/net/higmacv300/libhigmacv300.a
endif
LIBS += drivers/net/stmmac/libstmmac.a
endif
LIBS += drivers/serial/libserial.a

ifdef CONFIG_USB_DEVICE
LIBS += drivers/usb/device/libusb_device.a
endif

ifdef CONFIG_CMD_USB
LIBS += drivers/usb/host/libusb_host.a
endif

ifdef CONFIG_USB_SUPPORT
ifdef CONFIG_USB_HOST_ETHER
LIBS += drivers/usb/eth/libusb_eth.a
endif
endif

ifdef CONFIG_CMD_FAT
LIBS += fs/fat/libfat.a
LIBS += disk/libdisk.a
endif

ifdef CONFIG_DDR_TRAINING_V2
LIBS += drivers/ddr/$(CPU)/libddr.a
endif

LIBS += common/libcommon.a

ifdef CONFIG_OF_LIBFDT
LIBS += lib/libfdt/libfdt.a
endif

################################################################################

ifdef CONFIG_PRODUCT_WITH_BOOT
LIBS += $(LIBSPRODUCT)
endif

################################################################################
LIBS := $(addprefix $(obj),$(LIBS))
.PHONY : $(LIBS) $(TIMESTAMP_FILE) $(VERSION_FILE)

LIBBOARD = board/$(BOARDDIR)/lib$(BOARD).a
LIBBOARD := $(addprefix $(obj),$(LIBBOARD))

# Add GCC lib
ifdef USE_PRIVATE_LIBGCC
ifeq ("$(USE_PRIVATE_LIBGCC)", "yes")
PLATFORM_LIBGCC = -L $(OBJTREE)/arch/$(ARCH)/lib -lgcc
else
PLATFORM_LIBGCC = -L $(USE_PRIVATE_LIBGCC) -lgcc
endif
else
PLATFORM_LIBGCC = -L $(shell dirname `$(CC) $(CFLAGS) -print-libgcc-file-name`) -lgcc
endif
PLATFORM_LIBS += $(PLATFORM_LIBGCC)
export PLATFORM_LIBS

# Special flags for CPP when processing the linker script.
# Pass the version down so we can handle backwards compatibility
# on the fly.
LDPPFLAGS += \
	-include $(TOPDIR)/include/u-boot/u-boot.lds.h \
	$(shell $(LD) --version | \
	  sed -ne 's/GNU ld version \([0-9][0-9]*\)\.\([0-9][0-9]*\).*/-DLD_MAJOR=\1 -DLD_MINOR=\2/p')

ifeq ($(CONFIG_NAND_U_BOOT),y)
NAND_SPL = nand_spl
U_BOOT_NAND = $(obj)u-boot-nand.bin
endif

ifeq ($(CONFIG_ONENAND_U_BOOT),y)
ONENAND_IPL = onenand_ipl
U_BOOT_ONENAND = $(obj)u-boot-onenand.bin
ONENAND_BIN ?= $(obj)onenand_ipl/onenand-ipl-2k.bin
endif

__OBJS := $(subst $(obj),,$(OBJS))
__LIBS := $(subst $(obj),,$(LIBS)) $(subst $(obj),,$(LIBBOARD))

#########################################################################
#########################################################################

# Always append ALL so that arch config.mk's can add custom ones
ALL += $(obj)u-boot.srec $(obj)u-boot.bin $(obj)System.map $(U_BOOT_NAND) $(U_BOOT_ONENAND)

REG	:= $(wildcard $(TOPDIR)/*.reg $(TOPDIR)/.reg)
ifdef CONFIG_UNIFIED_BOOT
BOOTREGS := $(wildcard $(CONFIG_BOOT_REG0) $(CONFIG_BOOT_REG1) $(CONFIG_BOOT_REG2) $(CONFIG_BOOT_REG3) \
			$(CONFIG_BOOT_REG4) $(CONFIG_BOOT_REG5) $(CONFIG_BOOT_REG6) $(CONFIG_BOOT_REG7))

REGNUM  := $(words $(BOOTREGS))
MKFLAGS += -DREGNUM=$(REGNUM)
endif

all:		$(ALL)

$(obj)u-boot.hex:	$(obj)u-boot
		$(OBJCOPY) ${OBJCFLAGS} -O ihex $< $@

$(obj)u-boot.srec:	$(obj)u-boot
		$(OBJCOPY) -O srec $< $@

sinclude platform.mk

$(obj)u-boot.bin:	$(obj)u-boot	regfile
	$(OBJCOPY) ${OBJCFLAGS} -O binary $< $@
	$(OBJCOPY) -j .text -O binary $< $(obj)u-boot.text
ifdef CONFIG_UNIFIED_BOOT
	@cp -fv $@ $(obj)fastboot-burn.bin
else
	@dd if=$(obj)u-boot.bin of=$(obj)fb1 bs=1 count=$(CFG_REG_START) 2>/dev/null
	@dd if=$(REG) of=$(obj)fb2 bs=$(CFG_REG_LENGTH) conv=sync 2>/dev/null
	@dd if=$(obj)u-boot.bin of=$(obj)fb3 bs=1 skip=$(CFG_REG_END) 2>/dev/null
	@cat $(obj)fb1 $(obj)fb2 $(obj)fb3 > $(obj)fastboot-burn.bin
	@rm -f $(obj)fb1 $(obj)fb2 $(obj)fb3
	@-test -f $(obj)u-boot.bin && cp -rf $(obj)u-boot.bin $(obj)fastboot.bin
	@-test -f $(obj)u-boot && cp -rf $(obj)u-boot $(obj)fastboot
	@-chmod 754 $(obj)fastboot-burn.bin
endif
	@echo fastboot-burn.bin is Ready.

.PHONY: regfile
regfile:
	@if [ "$(words $(REG))" = "0" ]; then ( \
		echo '***' Need '.reg' or '*.reg' file in directory $(TOPDIR); \
		exit 1; \
	) fi
ifndef CONFIG_UNIFIED_BOOT
	@if [ "$(words $(REG))" != "1" ]; then ( \
		echo '***' Found multi '.reg' or '*.reg' file in directory $(TOPDIR); \
		echo '***' Files: $(notdir $(REG)); \
		exit 1; \
	) fi
endif

.PHONY: mini-boot.bin
mini-boot.bin: $(TOPDIR)/fastboot-burn.bin
	make -C $(TOPDIR)/arch/$(ARCH)/cpu/$(CPU)/compressed \
		CROSS_COMPILE="$(CROSS_COMPILE)" \
		BINIMAGE=$(TOPDIR)/fastboot-burn.bin TOPDIR=$(TOPDIR)

$(obj)u-boot.ldr:	$(obj)u-boot
		$(CREATE_LDR_ENV)
		$(LDR) -T $(CONFIG_BFIN_CPU) -c $@ $< $(LDR_FLAGS)

$(obj)u-boot.ldr.hex:	$(obj)u-boot.ldr
		$(OBJCOPY) ${OBJCFLAGS} -O ihex $< $@ -I binary

$(obj)u-boot.ldr.srec:	$(obj)u-boot.ldr
		$(OBJCOPY) ${OBJCFLAGS} -O srec $< $@ -I binary

$(obj)u-boot.img:	$(obj)u-boot.bin
		$(obj)tools/mkimage -A $(ARCH) -T firmware -C none \
		-a $(TEXT_BASE) -e 0 \
		-n $(shell sed -n -e 's/.*U_BOOT_VERSION//p' $(VERSION_FILE) | \
			sed -e 's/"[	 ]*$$/ for $(BOARD) board"/') \
		-d $< $@

$(obj)u-boot.imx:       $(obj)u-boot.bin
		$(obj)tools/mkimage -n $(IMX_CONFIG) -T imximage \
		-e $(TEXT_BASE) -d $< $@

$(obj)u-boot.kwb:       $(obj)u-boot.bin
		$(obj)tools/mkimage -n $(KWD_CONFIG) -T kwbimage \
		-a $(TEXT_BASE) -e $(TEXT_BASE) -d $< $@

$(obj)u-boot.sha1:	$(obj)u-boot.bin
		$(obj)tools/ubsha1 $(obj)u-boot.bin

$(obj)u-boot.dis:	$(obj)u-boot
		$(OBJDUMP) -d $< > $@

GEN_UBOOT = \
		UNDEF_SYM=`$(OBJDUMP) -x $(LIBBOARD) $(LIBS) | \
		sed  -n -e 's/.*\($(SYM_PREFIX)__u_boot_cmd_.*\)/-u\1/p'|sort|uniq`;\
		cd $(LNDIR) && $(LD) $(LDFLAGS) $$UNDEF_SYM $(__OBJS) \
			--start-group $(__LIBS) --end-group $(PLATFORM_LIBS) \
			-Map u-boot.map -o u-boot
$(obj)u-boot:	ddr_training auxcode depend $(SUBDIRS) $(OBJS) $(LIBBOARD) $(LIBS) $(LDSCRIPT) $(obj)u-boot.lds
		$(GEN_UBOOT)
ifeq ($(CONFIG_KALLSYMS),y)
		smap=`$(call SYSTEM_MAP,u-boot) | \
			awk '$$2 ~ /[tTwW]/ {printf $$1 $$3 "\\\\000"}'` ; \
		$(CC) $(CFLAGS) -DSYSTEM_MAP="\"$${smap}\"" \
			-c common/system_map.c -o $(obj)common/system_map.o
		$(GEN_UBOOT) $(obj)common/system_map.o
endif

.PHONY: auxcode
ifdef CONFIG_UNIFIED_BOOT
auxcode:
ifeq ($(CONFIG_AUXCODE_COMPILE_SUPPORT),y)
	if [ -d $(AUXCODE) ]; then \
		make -C $(AUXCODE) ARCH=arm CROSS_COMPILE="$(CROSS_COMPILE)" O=$(O); \
		cp -rf $(AUXCODE)/auxcode_sign.img $(ARCH_AUXIMAGE); \
	fi;
endif
	cp -rf $(ARCH_AUXIMAGE) $(AUXIMAGE);
ifdef CONFIG_SCPU_SUPPORT
	test ! -f $(ARCH_HSLIMAGE) || cp -rf $(ARCH_HSLIMAGE) $(HSLIMAGE)
	test ! -f $(ARCH_ASCIMAGE) || cp -rf $(ARCH_ASCIMAGE) $(ASCIMAGE)
endif
endif

.PHONY: ddr_training
ddr_training:
ifdef CONFIG_DDR_TRAINING
	$(MAKE) -C $(TOPDIR)/arch/$(ARCH)/cpu/$(CPU)/ddr_training \
		TOPDIR=$(TOPDIR) \
		CROSS_COMPILE="$(CROSS_COMPILE)"
endif



$(OBJS):	depend
		$(MAKE) -C $(CPUDIR) $(if $(REMOTE_BUILD),$@,$(notdir $@))

$(LIBS):	depend $(SUBDIRS)
	if [ ss$@ != ss$(LIBSPRODUCT) ]; then ( \
		$(MAKE) -C $(dir $(subst $(obj),,$@)); \
	) fi

$(LIBBOARD):	depend $(LIBS)
		$(MAKE) -C $(dir $(subst $(obj),,$@))

$(SUBDIRS):	depend
		$(MAKE) -C $@ all

$(LDSCRIPT):	depend
		$(MAKE) -C $(dir $@) $(notdir $@)

$(obj)u-boot.lds: $(LDSCRIPT)
		$(CPP) $(CPPFLAGS) $(LDPPFLAGS) -ansi -D__ASSEMBLY__ -P - <$^ >$@

$(NAND_SPL):	$(TIMESTAMP_FILE) $(VERSION_FILE) $(obj)include/autoconf.mk
		$(MAKE) -C nand_spl/board/$(BOARDDIR) all

$(U_BOOT_NAND):	$(NAND_SPL) $(obj)u-boot.bin
		cat $(obj)nand_spl/u-boot-spl-16k.bin $(obj)u-boot.bin > $(obj)u-boot-nand.bin

$(ONENAND_IPL):	$(TIMESTAMP_FILE) $(VERSION_FILE) $(obj)include/autoconf.mk
		$(MAKE) -C onenand_ipl/board/$(BOARDDIR) all

$(U_BOOT_ONENAND):	$(ONENAND_IPL) $(obj)u-boot.bin
		cat $(ONENAND_BIN) $(obj)u-boot.bin > $(obj)u-boot-onenand.bin

$(VERSION_FILE):
		@( printf '#define U_BOOT_VERSION "Fastboot %s%s"\n' "$(U_BOOT_VERSION)" \
		 '$(shell $(TOPDIR)/tools/setlocalversion $(TOPDIR))' ) > $@.tmp
		@cmp -s $@ $@.tmp && rm -f $@.tmp || mv -f $@.tmp $@

$(TIMESTAMP_FILE):
		@LC_ALL=C date +'#define U_BOOT_DATE "%b %d %C%y"' > $@
		@LC_ALL=C date +'#define U_BOOT_TIME "%T"' >> $@

gdbtools:
		$(MAKE) -C tools/gdb all || exit 1

updater:
		$(MAKE) -C tools/updater all || exit 1

env:
		$(MAKE) -C tools/env all MTD_VERSION=${MTD_VERSION} || exit 1

# Explicitly make _depend in subdirs containing multiple targets to prevent
# parallel sub-makes creating .depend files simultaneously.
depend dep:	$(TIMESTAMP_FILE) $(VERSION_FILE) $(obj)include/autoconf.mk
		for dir in $(SUBDIRS) $(CPUDIR) $(dir $(LDSCRIPT)) ; do \
			$(MAKE) -C $$dir _depend ; done

TAG_SUBDIRS = $(SUBDIRS)
TAG_SUBDIRS += $(dir $(__LIBS))
TAG_SUBDIRS += include

tags ctags:
		ctags -w -o $(obj)ctags `find $(TAG_SUBDIRS) \
						-name '*.[chS]' -print`

etags:
		etags -a -o $(obj)etags `find $(TAG_SUBDIRS) \
						-name '*.[chS]' -print`
cscope:
		find $(TAG_SUBDIRS) -name '*.[chS]' -print > cscope.files
		cscope -b -q -k

SYSTEM_MAP = \
		$(NM) $1 | \
		grep -v '\(compiled\)\|\(\.o$$\)\|\( [aUw] \)\|\(\.\.ng$$\)\|\(LASH[RL]DI\)' | \
		LC_ALL=C sort
$(obj)System.map:	$(obj)u-boot
		@$(call SYSTEM_MAP,$<) > $(obj)System.map

#
# Auto-generate the autoconf.mk file (which is included by all makefiles)
#
# This target actually generates 2 files; autoconf.mk and autoconf.mk.dep.
# the dep file is only include in this top level makefile to determine when
# to regenerate the autoconf.mk file.
$(obj)include/autoconf.mk.dep: $(obj)include/config.h include/common.h
	@$(XECHO) Generating $@ ; \
	set -e ; \
	: Generate the dependancies ; \
	$(CC) -x c -DDO_DEPS_ONLY -M $(HOSTCFLAGS) $(CPPFLAGS) \
		-MQ $(obj)include/autoconf.mk include/common.h > $@

$(obj)include/autoconf.mk: $(obj)include/config.h
	@$(XECHO) Generating $@ ; \
	set -e ; \
	: Extract the config macros ; \
	$(CPP) $(CFLAGS) -DDO_DEPS_ONLY -dM include/common.h | \
		sed -n -f tools/scripts/define2mk.sed > $@.tmp && \
	mv $@.tmp $@

#########################################################################
else	# !config.mk
all $(obj)u-boot.hex $(obj)u-boot.srec $(obj)u-boot.bin \
$(obj)u-boot.img $(obj)u-boot.dis $(obj)u-boot \
$(filter-out tools,$(SUBDIRS)) $(TIMESTAMP_FILE) $(VERSION_FILE) gdbtools \
updater env depend dep tags ctags etags cscope $(obj)System.map:
	@echo "System not configured - see README" >&2
	@ exit 1

tools:
	$(MAKE) -C tools
tools-all:
	$(MAKE) -C tools HOST_TOOLS_ALL=y
endif	# config.mk

.PHONY : CHANGELOG
CHANGELOG:
	git log --no-merges U-Boot-1_1_5.. | \
	unexpand -a | sed -e 's/\s\s*$$//' > $@

include/license.h: tools/bin2header COPYING
	 cat COPYING | gzip -9 -c | ./tools/bin2header license_gzip > include/license.h
#########################################################################

unconfig:
	@rm -f $(obj)include/config.h $(obj)include/config.mk \
		$(obj)board/*/config.tmp $(obj)board/*/*/config.tmp \
		$(obj)include/autoconf.mk $(obj)include/autoconf.mk.dep

platform.mk : %_config
	$(MAKE)

%: %_config
	$(MAKE)

#########################################################################

godbox_config: unconfig
	@echo "CFG_REG_START   = 64"    > platform.mk
	@echo "CFG_REG_LENGTH  = 8192"  >> platform.mk
	@echo "CFG_REG_END     = 8256"  >> platform.mk
	@$(MKCONFIG) $(@:_config=) arm godbox godbox

s40_config: unconfig
	@echo "CFG_REG_START  = 576"   > platform.mk
	@echo "CFG_REG_LENGTH = 8192"  >> platform.mk
	@echo "CFG_REG_END    = 8768"  >> platform.mk
	@$(MKCONFIG) $(@:_config=) arm s40 s40

hi3798mx_config: unconfig
	@echo "CFG_REG_START  = 64"   > platform.mk
	@echo "CFG_REG_LENGTH = 8192"  >> platform.mk
	@echo "CFG_REG_END    = 8256"  >> platform.mk
	@$(MKCONFIG) $(@:_config=) arm hi3798mx hi3798mx

hi3798cv2x_config: unconfig
	@echo "CFG_REG_START  = 64"   > platform.mk
	@echo "CFG_REG_LENGTH = 10240"  >> platform.mk
	@echo "CFG_REG_END    = 10304"  >> platform.mk
	@$(MKCONFIG) $(@:_config=) arm hi3798cv2x hi3798cv2x

hi3798mv2x_config: unconfig
	@echo "CFG_REG_START  = 64"   > platform.mk
	@echo "CFG_REG_LENGTH = 10240"  >> platform.mk
	@echo "CFG_REG_END    = 10304"  >> platform.mk
	@$(MKCONFIG) $(@:_config=) arm hi3798mv2x hi3798mv2x

hi3798mv310_config: unconfig
	@echo "CFG_REG_START  = 64"   > platform.mk
	@echo "CFG_REG_LENGTH = 10240"  >> platform.mk
	@echo "CFG_REG_END    = 10304"  >> platform.mk
	@$(MKCONFIG) $(@:_config=) arm hi3798mv310 hi3798mv310

hi3796mv200_config: unconfig
	@echo "CFG_REG_START  = 64"   > platform.mk
	@echo "CFG_REG_LENGTH = 10240"  >> platform.mk
	@echo "CFG_REG_END    = 10304"  >> platform.mk
	@$(MKCONFIG) $(@:_config=) arm hi3796mv200 hi3796mv200

hi3716mv410_config: unconfig
	@echo "CFG_REG_START  = 64"   > platform.mk
	@echo "CFG_REG_LENGTH = 8192"  >> platform.mk
	@echo "CFG_REG_END    = 8256"  >> platform.mk
	@$(MKCONFIG) $(@:_config=) arm hi3716mv410 hi3716mv410

hi3716mv420n_config: unconfig
	@echo "CFG_REG_START  = 64"   > platform.mk
	@echo "CFG_REG_LENGTH = 8192"  >> platform.mk
	@echo "CFG_REG_END    = 8256"  >> platform.mk
	@$(MKCONFIG) $(@:_config=) arm hi3716mv420n hi3716mv420n

TARGETS := godbox s40 hi3798mx hi3716mv410 hi3798cv2x hi3716mv420n
#########################################################################

.PHONY: mini-boot.clean
mini-boot.clean:
	@for ix in ${TARGETS}; do ( \
		test ! -d $(TOPDIR)/arch/arm/cpu/$${ix}/compressed \
			|| make -C $(TOPDIR)/arch/arm/cpu/$${ix}/compressed \
				CROSS_COMPILE="$(CROSS_COMPILE)" TOPDIR=$(TOPDIR) clean; \
	) done

.PHONY: ddr_training.clean
ddr_training.clean:
ifdef CONFIG_DDR_TRAINING
	@for ix in ${TARGETS}; do ( \
		test ! -d $(TOPDIR)/arch/arm/cpu/$${ix}/ddr_training \
			|| make -C $(TOPDIR)/arch/arm/cpu/$${ix}/ddr_training \
				CROSS_COMPILE="$(CROSS_COMPILE)" clean; \
	) done
endif

ifdef CONFIG_DDR_TRAINING_V2
	$(MAKE) -C $(TOPDIR)/drivers/ddr/$(CPU) clean
endif

auxcode.clean:
ifdef CONFIG_UNIFIED_BOOT
ifeq ($(CONFIG_AUXCODE_COMPILE_SUPPORT),y)
	@test -d $(AUXCODE) && make -C $(AUXCODE) ARCH=arm CROSS_COMPILE="$(CROSS_COMPILE)" clean
endif
	@rm -f $(AUXIMAGE)
	@rm -f $(HSLIMAGE)
	@rm -f $(ASCIMAGE)
endif

clean: mini-boot.clean ddr_training.clean auxcode.clean
	@rm -f $(obj)examples/standalone/82559_eeprom			  \
	       $(obj)examples/standalone/atmel_df_pow2			  \
	       $(obj)examples/standalone/eepro100_eeprom		  \
	       $(obj)examples/standalone/hello_world			  \
	       $(obj)examples/standalone/interrupt			  \
	       $(obj)examples/standalone/mem_to_mem_idma2intr		  \
	       $(obj)examples/standalone/sched				  \
	       $(obj)examples/standalone/smc91111_eeprom		  \
	       $(obj)examples/standalone/test_burst			  \
	       $(obj)examples/standalone/timer
	@rm -f $(obj)examples/api/demo{,.bin}
	@rm -f $(obj)tools/bmp_logo	   $(obj)tools/easylogo/easylogo  \
	       $(obj)tools/env/{fw_printenv,fw_setenv}			  \
	       $(obj)tools/envcrc					  \
	       $(obj)tools/gdb/{astest,gdbcont,gdbsend}			  \
	       $(obj)tools/gen_eth_addr    $(obj)tools/img2srec		  \
	       $(obj)tools/mkimage	   $(obj)tools/mpc86x_clk	  \
	       $(obj)tools/ncb		   $(obj)tools/ubsha1
	@rm -f $(obj)board/cray/L1/{bootscript.c,bootscript.image}	  \
	       $(obj)board/netstar/{eeprom,crcek,crcit,*.srec,*.bin}	  \
	       $(obj)board/trab/trab_fkt   $(obj)board/voiceblue/eeprom   \
	       $(obj)board/armltd/{integratorap,integratorcp}/u-boot.lds  \
	       $(obj)arch/blackfin/lib/u-boot.lds				  \
	       $(obj)u-boot.lds						  \
	       $(obj)arch/blackfin/cpu/bootrom-asm-offsets.[chs]
	@rm -f $(obj)include/bmp_logo.h
	@rm -f $(obj)nand_spl/{u-boot.lds,u-boot-spl,u-boot-spl.map,System.map}
	@rm -f $(obj)onenand_ipl/onenand-{ipl,ipl.bin,ipl.map}
	@rm -f $(ONENAND_BIN)
	@rm -f $(obj)onenand_ipl/u-boot.lds
	@rm -f $(TIMESTAMP_FILE) $(VERSION_FILE)
	@find $(OBJTREE) -type f \
		\( -name 'core' -o -name '*.bak' -o -name '*~' \
		-o -name '*.o'	-o -name '*.a' -o -name '*.exe'	\) -print \
		| xargs rm -f
	@rm -f $(obj)u-boot.text
	@rm -f platform.mk

clobber:	clean
	@find $(OBJTREE) -type f \( -name .depend \
		-o -name '*.srec' -o -name '*.bin' -o -name u-boot.img \) \
		-print0 \
		| xargs -0 rm -f
	@rm -f $(OBJS) $(obj)*.bak $(obj)ctags $(obj)etags $(obj)TAGS \
		$(obj)cscope.* $(obj)*.*~
	-@rm -f $(obj)fastboot.bin $(obj)fastboot-burn.bin $(obj)fastboot
	@rm -f $(obj)u-boot $(obj)u-boot.map $(obj)u-boot.hex $(ALL)
	@rm -f $(obj)u-boot.kwb
	@rm -f $(obj)u-boot.imx
	@rm -f $(obj)tools/{env/crc32.c,inca-swap-bytes}
	@rm -f $(obj)arch/powerpc/cpu/mpc824x/bedbug_603e.c
	@rm -f $(obj)include/asm/proc $(obj)include/asm/arch $(obj)include/asm
	@[ ! -d $(obj)nand_spl ] || find $(obj)nand_spl -name "*" -type l -print | xargs rm -f
	@[ ! -d $(obj)onenand_ipl ] || find $(obj)onenand_ipl -name "*" -type l -print | xargs rm -f

ifeq ($(OBJTREE),$(SRCTREE))
mrproper \
distclean:	clobber unconfig
else
mrproper \
distclean:	clobber unconfig
	rm -rf $(obj)*
endif

backup:
	F=`basename $(TOPDIR)` ; cd .. ; \
	gtar --force-local -zcvf `LC_ALL=C date "+$$F-%Y-%m-%d-%T.tar.gz"` $$F

#########################################################################
